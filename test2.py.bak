# -*-coding:utf-8-*
__author__ = 'Sofa'
__copyright__ = 'Copyright 2018, Sofa'
__license__ = 'GPL'

import matplotlib.pyplot as plt
from math import exp
pos = 0
masse = 1
carburant = 2
dm = 3
ve = 4
vitesse = 5
acceleration = 6

g = 9.81

fusee = {pos: 0,
		 masse: 2700e3 + 130e3,
		 carburant: 2700e3,
		 dm: 15e3,
		 ve: 2500,
		 vitesse: 0,
		 acceleration: 0}
		 
# fusee = {pos: 0,
		 # masse: 1.8 + 0.2,
		 # carburant: 1.8,
		 # dm: 1.1,
		 # ve: 20,
		 # vitesse: 0,
		 # acceleration: 0}


def calcul_acc(f, dt):

	f[acceleration] = 0

	if f[carburant] > 0:

		f[carburant] -= f[dm] * dt
		f[masse] -= f[dm]*dt
		poussee = f[dm] * f[ve]

		f[acceleration] += poussee

	rho = calcul_rho(f[pos])
	Cx = 1
	R = 1 / 2 * Cx * rho
	
	a = 100

	f[acceleration] -= pow(f[vitesse], 2) * R
	# f[acceleration] -= f[vitesse]* a

	f[acceleration] -= g * f[masse]

	f[acceleration] /= f[masse]


def calcul_rho(z):
	R = 8.31
	T = 300
	M = 29e-3

	return exp(-z*M*g/R*T)



def calcul_h(t):

	Mf = 130e3
	Mc = 2700e3
	Dm = 15e3
	P = Dm * fusee[ve]
	a = 1

	if Dm*t >= Mc:
		return -1

	m = lambda x: Mc + Mf - Dm*x
	
	A = -(g/(Dm-a)*m(0) +P/a)*pow(m(0), -a/Dm)
	
	z = lambda x: -g/(Dm-a)/(2*Dm) * pow(m(x), 2) +P/a*x - A/(a + Dm)*pow(m(x), a/Dm +1)

	return z(t) - z(0)


t_exec = 200
dt = 0.001
steps = int(t_exec / dt)

yl = list()
tl = list()
zl = [0]
t = 0

for i in range(steps):
	if fusee[pos] >= 0:
		calcul_acc(fusee, dt)
		fusee[vitesse] += fusee[acceleration] * dt
		fusee[pos] += fusee[vitesse] * dt
	
		yl.append(fusee[pos])
	else:
		yl.append(-0.1)

	if zl[-1] >= 0:

		zl.append(calcul_h(t))
	else:
		zl.append(-0.1)
	tl.append(t)
	t += dt

plt.plot(tl, zl[1:])
plt.plot(tl, yl)
plt.show()


